Done - Replace stone bbox with button.
Done - 'stone model' to be intersection based
Done - add star point object
Done - add lines object
Done - Add marks.
Done - Add a key-stroke mapping
Done - Support displaying variations (movetree)
Done - Add base widget
Done - Add stone hovering to the base widget
Done - Add default icon-actions to base widget
Done - Remove argument guarding code.
Done - Getting to the end of a Game causes problems for some reason.
Done - Create option for glift to always show variations (useful for problems)
Done - Change public createBlah(...) to just blah(...)
Done - For problems, support retrying.  This implies storing the old problem
  separately from what's currently being used.
Done - Change the form of the fullBoardData should be of the form:
Done! - Add more efficient next/prev move

Smaller Changes.
- Add generic options parsing. (I'm not sure this is necessary)
- Add support for numbering on the edges, beyond the lines. (Not sure if this is necessary)
- Add tests for widgets.
- Add tests for marks.
- Finish key-stroke mappings -- add more keys, support two go boards on same screen.
- Add movetree->SGF transformation
- Make the comment box prettier. (actionable?)
- Make the adding/removing stones smarter / more efficient.
- Change variation coloring so that it colors existing marks, rather than
  overwriting them.
- Add theme option for how variation numbers should be displayed (i.e., the
  color);
- Make it possible to change the width of the go board border
- Borders seem to not be included as part of 'width', so lining up the comment
  box has problems when the go board does/doesn't have a line-border
  see: http://stackoverflow.com/questions/7401369/why-is-svg-stroke-width-1-making-lines-transparent
- Make sure viewing KOGOs works (yikes) -> depends on adding Pass support
- IconBars --> Do they need a background?  Probably yes.
-  Ko support
- Add an info panel.
- Add the ability to create static images (i.e., canvas support)
- Maybe supply a field as part of the boardData that says whether the data is
  partial or not.  Then the methods could just be 'applyDisplayData' -- much
  easier to use, and less error prone

Problem Widget
- Add 'explain' support for problems.
  - Add ability/option to show which variation are right / wrong.
- Make Comments toggle-able.
- Add 'right/wrong' indicators for problems
  -> Maybe this should be part of the info display

- Create game editor widget. (many dependencies)
  - add moveTree support for delete
  - support vertically centered icons (editor).
  - Add icons for game editor.
  - Add a game editor
  - Support pass.  Currently the parsers barf on B[] and W[]

Some ideas for future development:
2. Make the base configuration totally resizeable.  This is a relatively
difficult problem I'm not sure what the best way to approach it is.  Probably I
will create a wrapper abstraction that automatically changes the dimensions of
the boxes, since everything is absolutely positioned.  How does the real world
solve this problem?
  - Auto-resizes.
  - Changes orientations based on screen dimensions.  See the KGS window.
